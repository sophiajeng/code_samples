-- Retrieve all employees whose address is in Elgin,IL.
SELECT * from EMPLOYEES WHERE ADDRESS LIKE '%ELGIN,IL%';

-- Retrieve all employees who were born during the 1970's.
SELECT * from EMPLOYEES WHERE YEAR(B_DATE) BETWEEN 1970 AND 1979;

-- Retrieve all employees in department 5 whose salary is between 60000 and 70000.
SELECT * from EMPLOYEES WHERE DEP_ID=5 AND SALARY BETWEEN 60000 AND 70000;

-- Retrieve a list of employees ordered by department ID.
SELECT * from EMPLOYEES ORDER BY DEP_ID DESC;
SELECT * from EMPLOYEES ORDER BY DEP_ID ASC;

--Retrieve a list of employees ordered in descending order by department ID and within each department ordered alphabetically in descending order by last name.
SELECT * from EMPLOYEES ORDER BY DEP_ID DESC, L_NAME ASC;

-- In SQL problem 2 (Exercise 2 Problem 2), use department name instead of department ID. Retrieve a list of employees ordered by department name and within each department ordered alphabetically in descending order by last name.
SELECT E.F_NAME, E.L_NAME, D.DEP_NAME from EMPLOYEES AS E, DEPARTMENTS AS D WHERE E.DEP_ID=D.DEPT_ID_DEP ORDER BY D.DEP_NAME DESC, E.L_NAME ASC;


--For each department ID retrieve the number of employees in the department.
SELECT DEP_ID,COUNT(*) FROM EMPLOYEES GROUP BY DEP_ID;

--For each department retrieve the number of employees in the department, and the average employee salary in the department..
SELECT DEP_ID,COUNT(*), ROUND(AVG(SALARY),2) FROM EMPLOYEES GROUP BY DEP_ID;
SELECT DEP_ID,COUNT(*) AS NUM_EMPLOYEES, ROUND(AVG(SALARY),2) AS AVG_SALARY FROM EMPLOYEES GROUP BY DEP_ID;
SELECT DEP_ID,COUNT(*) AS NUM_EMPLOYEES, ROUND(AVG(SALARY),2) AS AVG_SALARY FROM EMPLOYEES GROUP BY DEP_ID ORDER BY AVG_SALARY;


-- In SQL problem 4 (Exercise 3 Problem 4), limit the result to departments with fewer than 4 employees.
SELECT DEP_ID,COUNT(*) AS NUM_EMPLOYEES, ROUND(AVG(SALARY),2) AS AVG_SALARY FROM EMPLOYEES GROUP BY DEP_ID HAVING NUM_EMPLOYEES < 4 ORDER BY AVG_SALARY;

-- Enter a function that calculates the total cost of all animal rescues in the PETRESCUE table.
SELECT SUM(COST) FROM PETRESCUE;

--Enter a function that displays the total cost of all animal rescues in the PETRESCUE table in a column called SUM_OF_COST.
SELECT SUM(COST) AS SUM_OF_COST FROM PETRESCUE;

-- Enter a function that displays the maximum quantity of animals rescued.
SELECT MAX(QUANTITY) AS SUM_OF_COST FROM PETRESCUE;

-- Enter a function that displays the average cost of animals rescued.
SELECT AVG(COST) FROM PETRESCUE;
SELECT AVG(COST/QUANTITY) FROM PETRESCUE WHERE UCASE(ANIMAL) = 'DOG';

-- Enter a function that displays the rounded cost of each rescue.
SELECT ROUND(COST) FROM PETRESCUE;

-- Enter a function that displays the length of each animal name.
SELECT LENGTH(ANIMAL) FROM PETRESCUE;

-- Enter a function that displays the animal name in each rescue in uppercase.
SELECT UCASE(ANIMAL) FROM PETRESCUE;

-- Enter a function that displays the animal name in each rescue in uppercase without duplications.
SELECT DISTINCT(UCASE(ANIMAL)) FROM PETRESCUE;

--Enter a query that displays all the columns from the PETRESCUE table, where the animal(s) rescued are cats. Use cat in lower case in the query.
SELECT * FROM PETRESCUE WHERE LCASE(ANIMAL) = 'cat';

--Enter a function that displays the day of the month when cats have been rescued.
SELECT DAY(RESCUEDATE) FROM PETRESCUE WHERE LCASE(ANIMAL) = 'cat';

-- Enter a function that displays the number of rescues on the 5th month.
SELECT SUM(QUANTITY) FROM PETRESCUE WHERE MONTH(RESCUEDATE)='05';

-- Enter a function that displays the number of rescues on the 14th day of the month.
SELECT SUM(QUANTITY) FROM PETRESCUE WHERE DAY(RESCUEDATE)='14';

-- Animals rescued should see the vet within three days of arrivals. Enter a function that displays the third day from each rescue.
SELECT DATE_ADD(RESCUEDATE,INTERVAL 3 DAY) FROM PETRESCUE;

-- Enter a function that displays the length of time the animals have been rescued; the difference between today's date and the rescue date.
SELECT DATEDIFF(CURRENT_DATE(),RESCUEDATE) FROM PETRESCUE;

-- Execute a working query using a sub-select to retrieve all employees records whose salary is lower than the average salary.
SELECT * FROM EMPLOYEES WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES);

- Execute a Column Expression that retrieves all employees records with EMP_ID, SALARY and maximum salary as MAX_SALARY in every row.
SELECT EMP_ID,SALARY, (SELECT MAX(SALARY) AS MAX_SALARY FROM EMPLOYEES) FROM EMPLOYEES;

-- Retrieve only the EMPLOYEES records that correspond to jobs in the JOBS table.
SELECT * FROM EMPLOYEES INNER JOIN JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_IDENT;

--Retrieve only the list of employees whose JOB_TITLE is Jr. Designer.
SELECT * FROM EMPLOYEES INNER JOIN JOBS ON EMPLOYEES.JOB_ID = JOBS.JOB_IDENT WHERE UCASE(JOBS.JOB_TITLE)='JR. DESIGNER';

--Retrieve JOB information and who earn more than $70,000.
SELECT * FROM JOBS AS J INNER JOIN EMPLOYEES AS E ON J.JOB_IDENT = E.JOB_ID WHERE E.SALARY > 70000;

-- Retrieve JOB information and list of employees whose birth year is after 1976.
SELECT * FROM JOBS AS J INNER JOIN EMPLOYEES AS E ON J.JOB_IDENT = E.JOB_ID WHERE YEAR(E.B_DATE)>1976

--Retrieve JOB information and list of female employees whose birth year is after 1976.
SELECT * FROM JOBS AS J INNER JOIN EMPLOYEES AS E ON J.JOB_IDENT = E.JOB_ID WHERE YEAR(E.B_DATE)>1976 AND E.SEX='F';
